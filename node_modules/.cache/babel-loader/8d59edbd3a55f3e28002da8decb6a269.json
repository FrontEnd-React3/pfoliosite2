{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport isOnline from 'is-online';\nimport root from 'window-or-global';\n\nvar index = function (_a) {\n  var children = _a.children,\n      _b = _a.skip,\n      skip = _b === void 0 ? false : _b,\n      config = _a.config;\n\n  var _c = useState(false),\n      loading = _c[0],\n      setLoading = _c[1];\n\n  var _d = useState(null),\n      error = _d[0],\n      setError = _d[1];\n\n  var _e = useState(null),\n      response = _e[0],\n      setResponse = _e[1];\n\n  var _f = useState(null),\n      networkStatus = _f[0],\n      setNetworkStatus = _f[1];\n\n  useEffect(function () {\n    checkNetworkConnection();\n\n    if (!skip) {\n      fetch();\n    }\n  }, []);\n\n  var checkNetworkConnection = function () {\n    if (typeof document != 'undefined' && root && isOnline) {\n      root.addEventListener('offline', function () {\n        isOnline({\n          timeout: 1000\n        }).then(function (online) {\n          if (!online) {\n            setNetworkStatus('offline');\n          }\n        });\n      });\n      root.addEventListener('online', function () {\n        isOnline({\n          timeout: 1000\n        }).then(function (online) {\n          if (online) {\n            setNetworkStatus('online');\n          }\n        });\n      });\n      isOnline({\n        timeout: 1000\n      }).then(function (online) {\n        if (online && networkStatus !== 'online' || !online && networkStatus !== 'offline') {\n          setNetworkStatus(online ? 'online' : 'offline');\n        }\n      });\n    }\n  };\n\n  var fetch = function () {\n    if (config) {\n      setLoading(true);\n      axios(config).then(function (response) {\n        setResponse(response);\n        setLoading(false);\n      }).catch(function (error) {\n        setError(error);\n        setLoading(false);\n      });\n    }\n  }; // @ts-ignore\n\n\n  return children({\n    loading: loading,\n    error: error,\n    response: response,\n    refetch: fetch,\n    networkStatus: networkStatus\n  });\n};\n\nexport default index;","map":{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect, ReactNode } from 'react';\nimport axios, { AxiosResponse, AxiosError, AxiosRequestConfig } from 'axios';\nimport isOnline from 'is-online';\n// @ts-ignore\nimport root from 'window-or-global';\n\ninterface ChildrenProps {\n  loading: boolean,\n  error: AxiosError<any> | null,\n  response: AxiosResponse<any> | null,\n  refetch: () => void,\n  networkStatus: string | null;\n}\n\ninterface Props {\n  children: ((props: ChildrenProps) => ReactNode) | ReactNode;\n  skip?: boolean,\n  config: AxiosRequestConfig,\n}\n\nexport default ({ children, skip = false, config }: Props) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<AxiosError<any> | null>(null);\n  const [response, setResponse] = useState<AxiosResponse<any> | null>(null);\n  const [networkStatus, setNetworkStatus] = useState<string | null>(null);\n\n  useEffect((): void => {\n    checkNetworkConnection();\n    if (!skip) {\n      fetch();\n    }\n  }, []);\n\n  const checkNetworkConnection = (): void => {\n    if ((typeof document != 'undefined') && root && isOnline) {\n      root.addEventListener('offline', () => {\n        isOnline({ timeout: 1000 })\n          .then(online => {\n            if (!online) {\n              setNetworkStatus('offline');\n            }\n          });\n      });\n      root.addEventListener('online', () => {\n        isOnline({ timeout: 1000 })\n          .then(online => {\n            if (online) {\n              setNetworkStatus('online');\n            }\n          });\n      });\n      isOnline({ timeout: 1000 })\n        .then(online => {\n          if ((online && networkStatus !== 'online') || (!online && networkStatus !== 'offline')) {\n            setNetworkStatus(online ? 'online' : 'offline');\n          }\n        });\n    }\n  };\n\n  const fetch = (): void => {\n    if (config) {\n      setLoading(true);\n      axios(config)\n        .then((response: AxiosResponse<any>) => {\n          setResponse(response);\n          setLoading(false);\n        })\n        .catch((error: AxiosError<any>) => {\n          setError(error);\n          setLoading(false);\n        });\n    }\n  };\n\n  // @ts-ignore\n  return children({ loading, error, response, refetch: fetch, networkStatus });\n};\n"]},"metadata":{},"sourceType":"module"}